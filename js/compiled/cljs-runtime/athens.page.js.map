{"version":3,"sources":["athens/page.cljs"],"mappings":"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","names":["athens.page/render-blocks","block-uid","block","G__49967","re-frame.core/subscribe","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__49969","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__49971","cljs.core/chunk-buffer","i__49970","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49968","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","ch","cljs.core/deref","map__49972","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__49977","uid","string","open","children","dbid","children?","G__49974","G__49979","re-frame.core/dispatch","cljs.core/not","G__49975","G__49980","G__49976","G__49981","athens.parser/parse","athens.page/linked-pattern","cljs.core/re-pattern","athens.page/unlinked-pattern","athens.page/block-page","id","node","G__49982","parents","G__49983","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","b","map__49984","title","G__49986","or__4185__auto__","athens.page/node-page","linked-refs","G__49987","unlinked-refs","G__49988","s__49990","b__49992","i__49991","iter__49989","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","s__49994","b__49996","i__49995","iter__49993","athens.page/main","current-route","G__49997","G__49998","cljs.core/chunk-first"],"sourcesContent":["(ns athens.page\n  (:require [athens.parser :refer [parse]]\n            [reagent.core :as reagent]\n            [re-frame.core :refer [subscribe dispatch]]\n            [reitit.frontend.easy :as rfee]))\n\n(defn render-blocks [block-uid]\n  (fn [block-uid]\n    (let [block (subscribe [:block/children-sorted [:block/uid block-uid]])]\n      [:div\n       (doall\n        (for [ch (:block/children @block)]\n          (let [{:block/keys [uid string open children] dbid :db/id} ch\n                children? (not (zero? (count children)))]\n            ^{:key uid}\n            [:div\n             [:div.block {:style {:display \"flex\"}}\n              [:div.controls {:style {:display \"flex\" :align-items \"flex-start\" :padding-top 5}}\n               (cond\n                 (and children? open) [:span.arrow-down {:style {:width        0 :height 0\n                                                                 :border-left  \"5px solid transparent\"\n                                                                 :border-right \"5px solid transparent\"\n                                                                 :border-top   \"5px solid black\"\n                                                                 :cursor \"pointer\"\n                                                                 :margin-top 4}\n                                                         :on-click #(dispatch [:block/toggle-open dbid open])}]\n                 (and children? (not open)) [:span.arrow-right {:style {:width        0 :height 0\n                                                                        :border-top  \"5px solid transparent\"\n                                                                        :border-bottom \"5px solid transparent\"\n                                                                        :border-left   \"5px solid black\"\n                                                                        :cursor \"pointer\"\n                                                                        :margin-right 4}\n                                                                :on-click #(dispatch [:block/toggle-open dbid open])}]\n                 :else [:span {:style {:width 10}}])\n               [:span {:style {:height         12 :width 12 :border-radius \"50%\" :margin-right 5\n                               :cursor         \"pointer\" :display \"flex\" :background-color (if (not open) \"lightgray\" nil)\n                               :vertical-align \"middle\" :align-items \"center\" :justify-content \"center\"}}\n                [:span.controls {:style    {:height         5 :width 5 :border-radius \"50%\"\n                                            :cursor         \"pointer\" :display \"inline-block\" :background-color \"black\"\n                                            :vertical-align \"middle\"}\n                                 :on-click #(dispatch [:navigate :page {:id uid}])}]]]\n              [:span (parse string)]]\n             (when open\n               [:div {:style {:margin-left 20}}\n                [render-blocks uid]])])))])))\n\n; match [[title]] or #title or #[[title]]\n(defn linked-pattern [string]\n  (re-pattern (str \"(\"\n                   \"\\\\[{2}\" string \"\\\\]{2}\"\n                   \"|\" \"#\" string\n                   \"|\" \"#\" \"\\\\[{2}\" string \"\\\\[{2}\"\n                   \")\")))\n\n; also excludes [title] :(\n(defn unlinked-pattern [string]\n  (re-pattern (str \"[^\\\\[|#]\" string)))\n\n(defn block-page [id]\n  (fn [id]\n    (let [node (subscribe [:node [:block/uid id]])\n          parents (subscribe [:block/_children2 [:block/uid id]])]\n      [:div\n       [:span {:style {:color \"gray\"} }\n        (interpose \" > \" \n                   (map (fn [b]\n                          (let [{:block/keys [uid string] :node/keys [title]} b]\n                            ^{:key uid}\n                            [:span\n                             {:style {:cursor \"pointer\"}\n                              :on-click #(dispatch [:navigate :page {:id uid}])}\n                             (or string title)]))\n                        @parents))]\n       [:h2 {:style {:margin 0}} (str \"\u2022 \" (:block/string @node))]\n       [:div {:style {:margin-left 20}}\n        [render-blocks (:block/uid @node)]]])))\n\n(defn node-page [node]\n  (fn [node]\n    (let [linked-refs   (subscribe [:node/refs (linked-pattern   (:node/title node))])\n          unlinked-refs (subscribe [:node/refs (unlinked-pattern (:node/title node))])]\n      [:div\n       [:h2 (:node/title node)]\n       [render-blocks (:block/uid node)]\n       [:div\n        [:h3 \"Linked References\"]\n        [:div\n         (for [id (reduce into [] @linked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-page id]])]]\n       [:div\n        [:h3 \"Unlinked References\"]\n        [:div\n         (for [id (reduce into [] @unlinked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-page id]])]]])))\n\n(defn main []\n  (let [current-route (subscribe [:current-route])]\n    (fn []\n      (let [node (subscribe [:node [:block/uid (-> @current-route :path-params :id)]])]\n        [:div\n          ;;[:h1 \"Page Panel\"]\n         (if (:node/title @node)\n           [node-page @node]\n           [block-page (:block/uid @node)])]))))\n"]}