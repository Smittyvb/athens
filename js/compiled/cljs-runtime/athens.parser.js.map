{"version":3,"sources":["athens/parser.cljs"],"mappings":";;;;;AAKA,AAAA;AAAA,AAEA,AAAKA,AACH,AAAA,AAACC;AAQH;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAAC,AAAA,AAAA,AACS,AAAKG;AAAL,AAAA,AAAA,AAAeA;AADxB,AAES,AAAKC;AAAL,AACE,AAAMC,AAAG,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAoCF;AAApC,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGe,AAAA,AAAA,AAAA,AAACC,AAAqB,AAAA,AAAA,AAAAC,AAAaJ,AACYD;AAPzE,AAUS,AAAKA;AAAL,AACE,AAAMC,AAAG,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAoCN;AAApC,AAAA,AAAAM,AAAAA,AAACH,AAAAA,AAAAA;;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEc,AAAA,AAAA,AAAA,AAACC,AAAqB,AAAA,AAAA,AAAAC,AAAaJ,AAC9C,AAAA,AAASD;AAdvB,AAeS,AAAKC;AAAL,AACE,AAAMM,AAAO,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAsCP;AAAtC,AAAA,AAAAO,AAAAA,AAACL,AAAAA,AAAAA;;AAAd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEc,AAAA,AAAA,AAAA,AAACC,AAAqBH,AAAM,AAAAQ,AAAO,AAAA,AAAA,AAAAJ,AAAgBE;AAAvB,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;;AAlBtDb,AAmBEF;AAnBF,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAsBH,AAAA,AAAMY,AAAOC;AAAb,AACE,AAAMC,AAAO,AAACpB,AAAAA,AAAAA,AAAOmB,AAAAA;AAArB,AACE,AAAI,AAACE,AAAeD;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACiCD;;AADjC,AAAA,AAES,AAACG,AAAI,AAACpB,AAAUkB","names":["athens.parser/parser","instaparse.core/parser","athens.parser/transform","tree","G__74394","G__74395","instaparse.core/transform","x","title","id","G__74396","re-frame.core/subscribe","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","G__74397","string","G__74398","G__74399","athens.parser/parse","str","result","instaparse.core/failure?","cljs.core/vec"],"sourcesContent":["(ns athens.parser\n  (:require [instaparse.core :as insta]\n            [reitit.frontend.easy :as rfee]\n            [re-frame.core :refer [subscribe]]))\n\n(declare transform parse)\n\n(def parser\n  (insta/parser\n   \"S = c | link | bref | hash\n    <c> = #'(\\\\w|\\\\s)+'\n    link = <'[['> c <']]'>\n    hash = <'#'> c | <'#'> <'[['> c <']]'>\n    bref = <'(('> c <'))'>\n   \"))\n\n(defn transform\n  \"Transforms instaparse output to hiccup.\"\n  [tree]\n  (insta/transform\n    {:S    (fn [x] [:span x])\n     :link (fn [title]\n             (let [id (subscribe [:block/uid [:node/title title]])]\n               [:span\n                [:span {:style {:color \"gray\"}} \"[[\"]\n                [:a {:href  (rfee/href :page {:id (:block/uid @id)})\n                     :style {:text-decoration \"none\" :color \"dodgerblue\"}} title]\n                [:span {:style {:color \"gray\"}} \"]]\"]\n                ]))\n     :hash (fn [title]\n             (let [id (subscribe [:block/uid [:node/title title]])]\n               [:a {:style {:color \"gray\" :text-decoration \"none\" :font-weight \"bold\"}\n                    :href  (rfee/href :page {:id (:block/uid @id)})}\n                (str \"#\" title)]))\n     :bref (fn [id]\n             (let [string (subscribe [:block/string [:block/uid id]])]\n               [:span {:style {:font-size \"0.9em\" :border-bottom \"1px solid gray\"}}\n                [:a {:href (rfee/href :page {:id id})} (parse (:block/string @string))]]))}\n    tree))\n\n\n(defn parse [str]\n  (let [result (parser str)]\n    (if (insta/failure? result)\n      [:span {:style {:color \"red\"}} str]\n      [:span (vec (transform result))])))\n"]}