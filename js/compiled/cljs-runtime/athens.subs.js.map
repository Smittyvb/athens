{"version":3,"sources":["athens/subs.cljs"],"mappings":"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","names":["G__46932","G__46933","re-frame.core/reg-sub","db","_","G__46936","G__46937","G__46941","G__46942","G__46952","G__46953","re-posh.core/reg-query-sub","G__46956","G__46957","G__46963","G__46964","G__46967","G__46968","re-posh.core/reg-pull-sub","G__46969","G__46970","G__46971","G__46972","G__46973","G__46974","G__46975","G__46976","G__46977","G__46978","G__46979","p__46980","vec__46981","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","id","G__46984","re-posh.core/subscribe","block","athens.blocks/sort-block","G__46988","G__46989","G__46990","G__46991","G__46992","p__46993","vec__46994","G__46997","cljs.core/reverse","cljs.core/rest","b","res","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","G__47017","G__47018","G__47019","G__47020","re-posh.core/reg-sub","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__46821__auto__","result__46822__auto__","debux.common.util/send-trace!","e","e47063","nodes","G__47070","G__47071","G__47072","G__47073","debux.common.util/spy-last","e47124","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.subs\n  (:require\n   [athens.blocks :as blocks]\n   [re-frame.core :as re-frame]\n   [re-posh.core :as re-posh :refer [subscribe reg-query-sub reg-pull-sub reg-pull-many-sub]]\n   [day8.re-frame.tracing :refer-macros [fn-traced]]))\n;; note: not refering reg-sub because re-posh and re-frame have different reg-subs\n\n;; re-frame subscriptions\n(re-frame/reg-sub\n :user\n (fn [db _]\n   (:user db)\n   ))\n\n(re-frame/reg-sub\n  :errors\n  (fn [db _]\n    (:errors db)\n    ))\n\n(re-frame/reg-sub\n  :loading\n  (fn [db _]\n    (:loading db)\n    ))\n\n;; datascript queries\n(reg-query-sub\n :nodes\n '[:find [?e ...]\n   :where\n   [?e :node/title ?t]])\n\n(reg-query-sub\n  :node/refs\n  '[:find ?id\n    :in $ ?regex\n    :where\n    [?e :block/string ?s]\n    [(re-find ?regex ?s)]\n    [?e :block/uid ?id]])\n\n(reg-query-sub\n  :page/sidebar\n  '[:find ?order ?title ?bid\n    :where\n    [?e :page/sidebar ?order]\n    [?e :node/title ?title]\n    [?e :block/uid ?bid]])\n\n;; datascript pulls\n(reg-pull-sub\n :node\n '[*])\n\n(reg-pull-sub\n :block/uid\n '[:block/uid])\n\n(reg-pull-sub\n :block/string\n '[:block/string])\n\n(reg-pull-sub\n :blocks\n '[:block/string {:block/children ...}])\n\n(reg-pull-sub\n  :block/children\n  '[:block/uid :block/string :block/order :block/open :db/id {:block/children ...}])\n\n(re-frame/reg-sub\n  :block/children-sorted\n  (fn [[_ id] _]\n    (subscribe [:block/children id]))\n  (fn [block _]\n    (blocks/sort-block block)))\n\n(reg-pull-sub\n  :block/_children\n  '[:block/uid :block/string :node/title {:block/_children ...}])\n\n;; layer 3 subscriptions\n\n(re-frame/reg-sub\n :block/_children2\n  (fn [[_ id] _]\n   (subscribe [:block/_children id]))\n  (fn [block _] ; find path from nested block to origin node\n    (reverse\n     (rest\n      (loop [b block\n             res []]\n        (if (:node/title b)\n          (conj res b)\n          (recur (first (:block/_children b))\n                 (conj res (dissoc b :block/_children)))))))))\n\n(re-posh/reg-sub\n :pull-nodes\n :<- [:nodes]\n (fn-traced [nodes _]\n   {:type :pull-many\n    :pattern '[*]\n    :ids nodes}))\n\n(re-frame/reg-sub\n  :favorites\n  :<- [:page/sidebar]\n  (fn-traced [nodes _]\n    (->> nodes\n         (into [])\n         (sort-by first))\n    ))\n\n;; (rp/reg-sub\n;;  :node/refs2\n;;  (fn [[_ regex]]\n;;    (subscribe [:node/refs regex]))\n;;  (fn [ids _] ; for all refs, find their parents with reverse lookup\n;;    {:type :pull-many\n;;     :pattern '[:node/title :block/uid :block/string {:block/_children ...}]\n;;     :ids (reduce into [] ids)}))\n\n;; (rf/reg-sub\n;;  :node/refs3\n;;  (fn [[_ regex]]\n;;    (subscribe [:node/refs2 regex]))\n;;  (fn [blocks _]\n;;    ;; flatten paths like in :block/_children2 (except keep node/title)\n;;    ;; then normalize refs through group by :node/title\n;;    (->> blocks\n;;         (map (fn [block]\n;;                (reverse\n;;                 (loop [b block\n;;                        res []]\n;;                   (if (:node/title b)\n;;                     (conj res (dissoc b :block/children))\n;;                     (recur (first (:block/_children b))\n;;                            (conj res (dissoc b :block/_children))))))))\n;;         (group-by #(:node/title (first %)))\n;;         (reduce-kv (fn [m k v]\n;;                      (assoc m k (map rest v))) {} ))\n;;    ))\n"]}